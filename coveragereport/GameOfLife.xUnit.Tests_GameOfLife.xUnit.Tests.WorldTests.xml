<?xml version="1.0" encoding="utf-8"?>
<CoverageReport scope="GameOfLife.xUnit.Tests.WorldTests">
  <Summary>
    <Class>GameOfLife.xUnit.Tests.WorldTests</Class>
    <Assembly>GameOfLife.xUnit.Tests</Assembly>
    <Files>
      <File>C:\dev\Coveralls.net-Samples\src\GameOfLife.xUnit.Tests\WorldTests.cs</File>
    </Files>
    <Coveredlines>10</Coveredlines>
    <Uncoveredlines>0</Uncoveredlines>
    <Coverablelines>10</Coverablelines>
    <Totallines>29</Totallines>
    <Linecoverage>100%</Linecoverage>
  </Summary>
  <Metrics>
    <World_ConstructNew_WidthCorrect>
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <Sequencecoverage>100</Sequencecoverage>
      <Branchcoverage>100</Branchcoverage>
    </World_ConstructNew_WidthCorrect>
    <World_ConstructNew_HeightCorrect>
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <Sequencecoverage>100</Sequencecoverage>
      <Branchcoverage>100</Branchcoverage>
    </World_ConstructNew_HeightCorrect>
  </Metrics>
  <Files>
    <File name="C:\dev\Coveralls.net-Samples\src\GameOfLife.xUnit.Tests\WorldTests.cs">
      <LineAnalysis line="1" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using Xunit;" />
      <LineAnalysis line="2" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="3" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="namespace GameOfLife.xUnit.Tests" />
      <LineAnalysis line="4" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="{" />
      <LineAnalysis line="5" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    public class WorldTests" />
      <LineAnalysis line="6" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    {" />
      <LineAnalysis line="7" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        [Fact]" />
      <LineAnalysis line="8" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public void World_ConstructNew_WidthCorrect()" />
      <LineAnalysis line="9" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="10" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            const int expectedWidth = 5;" />
      <LineAnalysis line="11" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="            var data = new bool[expectedWidth, 12];" />
      <LineAnalysis line="12" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="13" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="            var world = new World(data);" />
      <LineAnalysis line="14" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="15" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="            Assert.Equal(expectedWidth, world.Width);" />
      <LineAnalysis line="16" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="17" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="18" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        [Fact]" />
      <LineAnalysis line="19" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public void World_ConstructNew_HeightCorrect()" />
      <LineAnalysis line="20" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="21" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            const int expectedHeight = 5;" />
      <LineAnalysis line="22" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="            var data = new bool[12, expectedHeight];" />
      <LineAnalysis line="23" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="24" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="            var world = new World(data);" />
      <LineAnalysis line="25" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="26" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="            Assert.Equal(expectedHeight, world.Height);" />
      <LineAnalysis line="27" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="28" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    }" />
      <LineAnalysis line="29" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="}" />
    </File>
  </Files>
</CoverageReport>